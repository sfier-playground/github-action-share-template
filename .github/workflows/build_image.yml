on:
  workflow_call:
    inputs:
      service-name:
        type: string
        required: true
        description: application name
      environment:
        type: string
        required: true
        description: environemnt to use in the image tag

jobs:
  build_and_publish_image:
    runs-on: ubuntu-latest
    env:
      JOB_ENV_BASE_REGISTRY: gcr.io
    steps:
      # - name: Prepare Cred
      #   id: p-creds
      #   run:
      #     echo "C_JSON=$(echo -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d)" >> "$GITHUB_OUTPUT"
      - name: Configure Google Cloud CLI
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ echo -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 -d }}
          region: ${{ secrets.GCP_REGION }}
        # run: |
        #   mkdir -p ~/.gcp-creds
        #   echo ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }} > ~/.gcp-creds/gcp-key.json
        #   gcloud auth activate-service-account --key-file=~/.gcp-creds/gcp-key.json
        #   gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        #   gcloud config set run/region ${{ secrets.GCP_REGION }}
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set Image URL
        id: set-image-url
        run: |
          echo "IMAGE_SHA_URL=${{ env.JOB_ENV_BASE_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.environment  }}-${{ inputs.service-name }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "IMAGE_LATEST_URL=${{ env.JOB_ENV_BASE_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.environment  }}-${{ inputs.service-name }}:latest" >> "$GITHUB_OUTPUT"
      - name: Docker Login
        run: |
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Docker Build & Push
        run: |
          docker build --file ./Dockerfile --tag ${{ steps.set-image-url.outputs.IMAGE_SHA_URL }} --tag ${{ steps.set-image-url.outputs.IMAGE_LATEST_URL }}  --build-arg PAT=${{ secrets.PAT }}
          docker push reg/user/image --all-tags


